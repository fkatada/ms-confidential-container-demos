name: Cleanup

on:
  workflow_call:
  schedule:
    - cron: "0 0 * * *"

jobs:
  cleanup_registry:
    name: Cleanup Container Registry
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Cleanup Public Azure Container Registry
        if: github.event_name != 'pull_request'
        run: |
          az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }}
          az acr repository delete --name ${{ secrets.AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/kafka/consumer:${{ github.sha }} --yes
          az acr repository delete --name ${{ secrets.AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/kafka/producer:${{ github.sha }} --yes

      - name: Cleanup Test Azure Container Registry
        if: github.event_name == 'pull_request'
        run: |
          az acr login --name ${{ secrets.TEST_AZURE_REGISTRY_NAME }}
          az acr repository delete --name ${{ secrets.TEST_AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/kafka/consumer:${{ github.sha }} --yes
          az acr repository delete --name ${{ secrets.TEST_AZURE_REGISTRY_NAME }} --image private/${{ github.actor }}/acc/samples/kafka/producer:${{ github.sha }} --yes

  cleanup-cluster:
    name: Clean Up
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Clean Up
        id: cleanup
        env: 
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
        run: | 
          result=$(az aks list -g $RESOURCE_GROUP --query "[].name" -o tsv)

          for name in $result 
          do
              max_retries=5
              retries=0
              while [ $retries -lt $max_retries ]; do
                  echo "Querying for cluster state"
                  set -e
                  EXIT_CODE=0
                  clusterstate=$(az aks show -g $RESOURCE_GROUP -n $name --query 'provisioningState' -o tsv) || EXIT_CODE=$?
                  if [[ $EXIT_CODE -eq 0 ]]; then
                    # cluster still exists, try to delete
                    if [[ $clusterstate == *"Succeeded"* ]]; then
                        echo "Returned result is $clusterstate"
                        echo "Cluster is ready to be deleted."
                        powerState=$(az aks show -g $RESOURCE_GROUP -n $name --query "powerState.code" -o tsv)
                        if [[ $powerState != *"Stopped"* ]]; then
                          echo "Power state is $powerState, stopping"
                          az aks stop --resource-group $RESOURCE_GROUP --name $name 2>&1
                        fi
                        az aks delete --resource-group $RESOURCE_GROUP --name $name --no-wait --yes
                    elif [[ $clusterstate == *"Stopped"* ]] || [[ $clusterstate == *"Failed"* ]]; then
                        echo "Returned result is $clusterstate"
                        az aks delete --resource-group $RESOURCE_GROUP --name $name --no-wait --yes
                    else
                        echo "Returned cluster provisioning state is $clusterstate"
                        echo "Retrying in 3 minutes..."
                    fi
                    retries=$((retries+1))
                    sleep 180
                  else
                    break # Exit the loop since the cluster no longer exists
                  fi
              done
              if [ $retries -eq $max_retries ]; then
                  echo "The operation has been tried 5 times without success."
                  exit 1
              fi
          done
